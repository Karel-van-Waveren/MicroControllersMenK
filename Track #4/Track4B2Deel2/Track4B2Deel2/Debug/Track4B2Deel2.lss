
Track4B2Deel2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000296  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000242  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000296  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000591  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001d7  00000000  00000000  000008e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000507  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00000fc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00006fff  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000028f  00000000  00000000  00008033  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  000082c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000022e  00000000  00000000  00008392  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a0 30       	cpi	r26, 0x00	; 0
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	22 d0       	rcall	.+68     	; 0xee <main>
  aa:	c9 c0       	rjmp	.+402    	; 0x23e <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <wait>:
	OCR1B = green;
}

void setBlue( unsigned char blue )
{
	OCR1C = blue;
  ae:	18 16       	cp	r1, r24
  b0:	19 06       	cpc	r1, r25
  b2:	6c f4       	brge	.+26     	; 0xce <wait+0x20>
  b4:	20 e0       	ldi	r18, 0x00	; 0
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	ef ec       	ldi	r30, 0xCF	; 207
  ba:	f7 e0       	ldi	r31, 0x07	; 7
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <wait+0xe>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <wait+0x14>
  c2:	00 00       	nop
  c4:	2f 5f       	subi	r18, 0xFF	; 255
  c6:	3f 4f       	sbci	r19, 0xFF	; 255
  c8:	28 17       	cp	r18, r24
  ca:	39 07       	cpc	r19, r25
  cc:	a9 f7       	brne	.-22     	; 0xb8 <wait+0xa>
  ce:	08 95       	ret

000000d0 <timer1Init>:
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	9b bd       	out	0x2b, r25	; 43
  d6:	8a bd       	out	0x2a, r24	; 42
  d8:	99 bd       	out	0x29, r25	; 41
  da:	88 bd       	out	0x28, r24	; 40
  dc:	90 93 79 00 	sts	0x0079, r25
  e0:	80 93 78 00 	sts	0x0078, r24
  e4:	89 ea       	ldi	r24, 0xA9	; 169
  e6:	8f bd       	out	0x2f, r24	; 47
  e8:	8b e0       	ldi	r24, 0x0B	; 11
  ea:	8e bd       	out	0x2e, r24	; 46
  ec:	08 95       	ret

000000ee <main>:
// void setBlue( unsigned char blue)

// Main program: Counting on T1
int main( void )
{
	DDRB = 0xFF;					// set PORTB for compare output 
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	87 bb       	out	0x17, r24	; 23
	timer1Init();
  f2:	ee df       	rcall	.-36     	; 0xd0 <timer1Init>
	wait(100);	
  f4:	84 e6       	ldi	r24, 0x64	; 100
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	da df       	rcall	.-76     	; 0xae <wait>
}

// Set pulse width for RED on pin PB5, 0=off, 255=max
void setRed( unsigned char red )
{
	OCR1A = red;
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	9b bd       	out	0x2b, r25	; 43
 100:	8a bd       	out	0x2a, r24	; 42
}

void setGreen( unsigned char green )
{
	OCR1B = green;
 102:	99 bd       	out	0x29, r25	; 41
 104:	88 bd       	out	0x28, r24	; 40
}

void setBlue( unsigned char blue )
{
	OCR1C = blue;
 106:	90 93 79 00 	sts	0x0079, r25
 10a:	80 93 78 00 	sts	0x0078, r24
		
		int deltaRed = 1;
		int deltaGreen = 1;
		int deltaBlue = 1;
		
				for (int red = 255; red>=0; red-=deltaRed)
 10e:	cf ef       	ldi	r28, 0xFF	; 255
 110:	d0 e0       	ldi	r29, 0x00	; 0
	wait(100);	
		setRed (255);
		setGreen(255);
		setBlue(255);
		
		int deltaRed = 1;
 112:	ee 24       	eor	r14, r14
 114:	e3 94       	inc	r14
 116:	f1 2c       	mov	r15, r1
 118:	ce 01       	movw	r24, r28
 11a:	99 27       	eor	r25, r25
}

// Set pulse width for RED on pin PB5, 0=off, 255=max
void setRed( unsigned char red )
{
	OCR1A = red;
 11c:	9b bd       	out	0x2b, r25	; 43
 11e:	8a bd       	out	0x2a, r24	; 42
		int deltaBlue = 1;
		
				for (int red = 255; red>=0; red-=deltaRed)
		{
			setRed( red );				// 8-bits PWM on pin OCR1a 
			deltaRed += 2;					// progressive steps up
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	e8 0e       	add	r14, r24
 124:	f1 1c       	adc	r15, r1
			wait(10);					// delay of 100 ms (busy waiting)
 126:	8a e0       	ldi	r24, 0x0A	; 10
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	c1 df       	rcall	.-126    	; 0xae <wait>
		
		int deltaRed = 1;
		int deltaGreen = 1;
		int deltaBlue = 1;
		
				for (int red = 255; red>=0; red-=deltaRed)
 12c:	ce 19       	sub	r28, r14
 12e:	df 09       	sbc	r29, r15
 130:	9a f7       	brpl	.-26     	; 0x118 <main+0x2a>

		// change some colors
		// RED

		
		for (int green = 255; green>=0; green-=deltaGreen)
 132:	99 24       	eor	r9, r9
 134:	9a 94       	dec	r9
 136:	a1 2c       	mov	r10, r1
 138:	bb 24       	eor	r11, r11
 13a:	b3 94       	inc	r11
 13c:	81 2c       	mov	r8, r1
			deltaGreen += 2;					// progressive steps up
			wait(10);					// delay of 100 ms (busy waiting)
		}
		
		wait(100);
		for (int red = 0; red<=255; red+=deltaRed)
 13e:	71 2c       	mov	r7, r1
 140:	61 2c       	mov	r6, r1
	OCR1B = green;
}

void setBlue( unsigned char blue )
{
	OCR1C = blue;
 142:	0f 2e       	mov	r0, r31
 144:	f8 e7       	ldi	r31, 0x78	; 120
 146:	cf 2e       	mov	r12, r31
 148:	d1 2c       	mov	r13, r1
 14a:	f0 2d       	mov	r31, r0

		// change some colors
		// RED

		
		for (int green = 255; green>=0; green-=deltaGreen)
 14c:	09 2d       	mov	r16, r9
 14e:	1a 2d       	mov	r17, r10
 150:	cb 2d       	mov	r28, r11
 152:	d8 2d       	mov	r29, r8
 154:	c8 01       	movw	r24, r16
 156:	99 27       	eor	r25, r25
	OCR1A = red;
}

void setGreen( unsigned char green )
{
	OCR1B = green;
 158:	99 bd       	out	0x29, r25	; 41
 15a:	88 bd       	out	0x28, r24	; 40

		
		for (int green = 255; green>=0; green-=deltaGreen)
		{
			setGreen( green );				// 8-bits PWM on pin OCR1a
			deltaGreen += 2;					// progressive steps up
 15c:	22 96       	adiw	r28, 0x02	; 2
			wait(10);					// delay of 100 ms (busy waiting)
 15e:	8a e0       	ldi	r24, 0x0A	; 10
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	a5 df       	rcall	.-182    	; 0xae <wait>

		// change some colors
		// RED

		
		for (int green = 255; green>=0; green-=deltaGreen)
 164:	0c 1b       	sub	r16, r28
 166:	1d 0b       	sbc	r17, r29
 168:	aa f7       	brpl	.-22     	; 0x154 <main+0x66>
			setGreen( green );				// 8-bits PWM on pin OCR1a
			deltaGreen += 2;					// progressive steps up
			wait(10);					// delay of 100 ms (busy waiting)
		}
		
		wait(100);
 16a:	84 e6       	ldi	r24, 0x64	; 100
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	9f df       	rcall	.-194    	; 0xae <wait>
		for (int red = 0; red<=255; red+=deltaRed)
 170:	07 2d       	mov	r16, r7
 172:	16 2d       	mov	r17, r6
 174:	c8 01       	movw	r24, r16
 176:	99 27       	eor	r25, r25
}

// Set pulse width for RED on pin PB5, 0=off, 255=max
void setRed( unsigned char red )
{
	OCR1A = red;
 178:	9b bd       	out	0x2b, r25	; 43
 17a:	8a bd       	out	0x2a, r24	; 42
		
		wait(100);
		for (int red = 0; red<=255; red+=deltaRed)
		{
			setRed( red );				// 8-bits PWM on pin OCR1a 
			deltaRed -= 2;					// progressive steps down
 17c:	82 e0       	ldi	r24, 0x02	; 2
 17e:	e8 1a       	sub	r14, r24
 180:	f1 08       	sbc	r15, r1
			wait(10);					// delay of 100 ms (busy waiting)
 182:	8a e0       	ldi	r24, 0x0A	; 10
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	93 df       	rcall	.-218    	; 0xae <wait>
			deltaGreen += 2;					// progressive steps up
			wait(10);					// delay of 100 ms (busy waiting)
		}
		
		wait(100);
		for (int red = 0; red<=255; red+=deltaRed)
 188:	0e 0d       	add	r16, r14
 18a:	1f 1d       	adc	r17, r15
 18c:	0f 3f       	cpi	r16, 0xFF	; 255
 18e:	11 05       	cpc	r17, r1
 190:	89 f3       	breq	.-30     	; 0x174 <main+0x86>
 192:	84 f3       	brlt	.-32     	; 0x174 <main+0x86>
			deltaRed -= 2;					// progressive steps down
			wait(10);					// delay of 100 ms (busy waiting)
		}
		//setRed( 0 );
		deltaRed = 1;
		wait(100);
 194:	84 e6       	ldi	r24, 0x64	; 100
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	8a df       	rcall	.-236    	; 0xae <wait>
		for (int blue = 255; blue>=0; blue-=deltaBlue)
 19a:	e9 2c       	mov	r14, r9
 19c:	fa 2c       	mov	r15, r10
			deltaRed -= 2;					// progressive steps down
			wait(10);					// delay of 100 ms (busy waiting)
		}
		//setRed( 0 );
		deltaRed = 1;
		wait(100);
 19e:	0b 2d       	mov	r16, r11
 1a0:	18 2d       	mov	r17, r8
 1a2:	c7 01       	movw	r24, r14
 1a4:	99 27       	eor	r25, r25
	OCR1B = green;
}

void setBlue( unsigned char blue )
{
	OCR1C = blue;
 1a6:	f6 01       	movw	r30, r12
 1a8:	91 83       	std	Z+1, r25	; 0x01
 1aa:	80 83       	st	Z, r24
		deltaRed = 1;
		wait(100);
		for (int blue = 255; blue>=0; blue-=deltaBlue)
		{
			setBlue( blue );				// 8-bits PWM on pin OCR1a
			deltaBlue += 2;					// progressive steps up
 1ac:	0e 5f       	subi	r16, 0xFE	; 254
 1ae:	1f 4f       	sbci	r17, 0xFF	; 255
			wait(10);					// delay of 100 ms (busy waiting)
 1b0:	8a e0       	ldi	r24, 0x0A	; 10
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	7c df       	rcall	.-264    	; 0xae <wait>
			wait(10);					// delay of 100 ms (busy waiting)
		}
		//setRed( 0 );
		deltaRed = 1;
		wait(100);
		for (int blue = 255; blue>=0; blue-=deltaBlue)
 1b6:	e0 1a       	sub	r14, r16
 1b8:	f1 0a       	sbc	r15, r17
 1ba:	9a f7       	brpl	.-26     	; 0x1a2 <main+0xb4>
		{
			setBlue( blue );				// 8-bits PWM on pin OCR1a
			deltaBlue += 2;					// progressive steps up
			wait(10);					// delay of 100 ms (busy waiting)
		}
		wait(100);
 1bc:	84 e6       	ldi	r24, 0x64	; 100
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	76 df       	rcall	.-276    	; 0xae <wait>
		for (int green = 0; green<=255; green+=deltaGreen)
 1c2:	e7 2c       	mov	r14, r7
 1c4:	f6 2c       	mov	r15, r6
 1c6:	c7 01       	movw	r24, r14
 1c8:	99 27       	eor	r25, r25
	OCR1A = red;
}

void setGreen( unsigned char green )
{
	OCR1B = green;
 1ca:	99 bd       	out	0x29, r25	; 41
 1cc:	88 bd       	out	0x28, r24	; 40
		}
		wait(100);
		for (int green = 0; green<=255; green+=deltaGreen)
		{
			setGreen( green );				// 8-bits PWM on pin OCR1a
			deltaGreen -= 2;					// progressive steps down
 1ce:	22 97       	sbiw	r28, 0x02	; 2
			wait(10);					// delay of 100 ms (busy waiting)
 1d0:	8a e0       	ldi	r24, 0x0A	; 10
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	6c df       	rcall	.-296    	; 0xae <wait>
			setBlue( blue );				// 8-bits PWM on pin OCR1a
			deltaBlue += 2;					// progressive steps up
			wait(10);					// delay of 100 ms (busy waiting)
		}
		wait(100);
		for (int green = 0; green<=255; green+=deltaGreen)
 1d6:	ec 0e       	add	r14, r28
 1d8:	fd 1e       	adc	r15, r29
 1da:	ff ef       	ldi	r31, 0xFF	; 255
 1dc:	ef 16       	cp	r14, r31
 1de:	f1 04       	cpc	r15, r1
 1e0:	91 f3       	breq	.-28     	; 0x1c6 <main+0xd8>
 1e2:	8c f3       	brlt	.-30     	; 0x1c6 <main+0xd8>
			deltaGreen -= 2;					// progressive steps down
			wait(10);					// delay of 100 ms (busy waiting)
		}
		//setRed( 0 );
		deltaGreen = 1;
		wait(100);
 1e4:	84 e6       	ldi	r24, 0x64	; 100
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	62 df       	rcall	.-316    	; 0xae <wait>

		for (int red = 255; red>=0; red-=deltaRed)
 1ea:	c9 2d       	mov	r28, r9
 1ec:	da 2d       	mov	r29, r10
			setRed( red );				// 8-bits PWM on pin OCR1a 
			deltaRed -= 2;					// progressive steps down
			wait(10);					// delay of 100 ms (busy waiting)
		}
		//setRed( 0 );
		deltaRed = 1;
 1ee:	eb 2c       	mov	r14, r11
 1f0:	f8 2c       	mov	r15, r8
 1f2:	ce 01       	movw	r24, r28
 1f4:	99 27       	eor	r25, r25
}

// Set pulse width for RED on pin PB5, 0=off, 255=max
void setRed( unsigned char red )
{
	OCR1A = red;
 1f6:	9b bd       	out	0x2b, r25	; 43
 1f8:	8a bd       	out	0x2a, r24	; 42
		wait(100);

		for (int red = 255; red>=0; red-=deltaRed)
		{
			setRed( red );				// 8-bits PWM on pin OCR1a
			deltaRed += 2;					// progressive steps up
 1fa:	f2 e0       	ldi	r31, 0x02	; 2
 1fc:	ef 0e       	add	r14, r31
 1fe:	f1 1c       	adc	r15, r1
			wait(10);					// delay of 100 ms (busy waiting)
 200:	8a e0       	ldi	r24, 0x0A	; 10
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	54 df       	rcall	.-344    	; 0xae <wait>
		}
		//setRed( 0 );
		deltaGreen = 1;
		wait(100);

		for (int red = 255; red>=0; red-=deltaRed)
 206:	ce 19       	sub	r28, r14
 208:	df 09       	sbc	r29, r15
 20a:	9a f7       	brpl	.-26     	; 0x1f2 <main+0x104>
		{
			setRed( red );				// 8-bits PWM on pin OCR1a
			deltaRed += 2;					// progressive steps up
			wait(10);					// delay of 100 ms (busy waiting)
		}
		wait(100);
 20c:	84 e6       	ldi	r24, 0x64	; 100
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	4e df       	rcall	.-356    	; 0xae <wait>
		for (int blue = 0; blue<=255; blue+=deltaBlue)
 212:	c7 2d       	mov	r28, r7
 214:	d6 2d       	mov	r29, r6
 216:	ce 01       	movw	r24, r28
 218:	99 27       	eor	r25, r25
	OCR1B = green;
}

void setBlue( unsigned char blue )
{
	OCR1C = blue;
 21a:	f6 01       	movw	r30, r12
 21c:	91 83       	std	Z+1, r25	; 0x01
 21e:	80 83       	st	Z, r24
		}
		wait(100);
		for (int blue = 0; blue<=255; blue+=deltaBlue)
		{
			setBlue( blue );				// 8-bits PWM on pin OCR1a
			deltaBlue -= 2;					// progressive steps down
 220:	02 50       	subi	r16, 0x02	; 2
 222:	11 09       	sbc	r17, r1
			wait(10);					// delay of 100 ms (busy waiting)
 224:	8a e0       	ldi	r24, 0x0A	; 10
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	42 df       	rcall	.-380    	; 0xae <wait>
			setRed( red );				// 8-bits PWM on pin OCR1a
			deltaRed += 2;					// progressive steps up
			wait(10);					// delay of 100 ms (busy waiting)
		}
		wait(100);
		for (int blue = 0; blue<=255; blue+=deltaBlue)
 22a:	c0 0f       	add	r28, r16
 22c:	d1 1f       	adc	r29, r17
 22e:	cf 3f       	cpi	r28, 0xFF	; 255
 230:	d1 05       	cpc	r29, r1
 232:	89 f3       	breq	.-30     	; 0x216 <main+0x128>
 234:	84 f3       	brlt	.-32     	; 0x216 <main+0x128>
			deltaBlue -= 2;					// progressive steps down
			wait(10);					// delay of 100 ms (busy waiting)
		}
		//setRed( 0 );
		deltaBlue = 1;
		wait(100);
 236:	84 e6       	ldi	r24, 0x64	; 100
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	39 df       	rcall	.-398    	; 0xae <wait>


		// WHITE
		// for (int white = 0; white<=255; white += delta)
		// . . .
	} 
 23c:	87 cf       	rjmp	.-242    	; 0x14c <main+0x5e>

0000023e <_exit>:
 23e:	f8 94       	cli

00000240 <__stop_program>:
 240:	ff cf       	rjmp	.-2      	; 0x240 <__stop_program>
