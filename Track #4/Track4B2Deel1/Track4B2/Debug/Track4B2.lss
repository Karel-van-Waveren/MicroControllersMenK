
Track4B2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000246  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000246  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000050d  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001e6  00000000  00000000  0000080d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004b1  00000000  00000000  000009f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00000ea4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00006ff5  00000000  00000000  00000f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000020b  00000000  00000000  00007f0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00008118  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000022e  00000000  00000000  000081d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a0 30       	cpi	r26, 0x00	; 0
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	22 d0       	rcall	.+68     	; 0xee <main>
  aa:	a1 c0       	rjmp	.+322    	; 0x1ee <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <wait>:
	OCR1B = green;
}

void setBlue( unsigned char blue )
{
	OCR1C = blue;
  ae:	18 16       	cp	r1, r24
  b0:	19 06       	cpc	r1, r25
  b2:	6c f4       	brge	.+26     	; 0xce <wait+0x20>
  b4:	20 e0       	ldi	r18, 0x00	; 0
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	ef ec       	ldi	r30, 0xCF	; 207
  ba:	f7 e0       	ldi	r31, 0x07	; 7
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <wait+0xe>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <wait+0x14>
  c2:	00 00       	nop
  c4:	2f 5f       	subi	r18, 0xFF	; 255
  c6:	3f 4f       	sbci	r19, 0xFF	; 255
  c8:	28 17       	cp	r18, r24
  ca:	39 07       	cpc	r19, r25
  cc:	a9 f7       	brne	.-22     	; 0xb8 <wait+0xa>
  ce:	08 95       	ret

000000d0 <timer1Init>:
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	9b bd       	out	0x2b, r25	; 43
  d6:	8a bd       	out	0x2a, r24	; 42
  d8:	99 bd       	out	0x29, r25	; 41
  da:	88 bd       	out	0x28, r24	; 40
  dc:	90 93 79 00 	sts	0x0079, r25
  e0:	80 93 78 00 	sts	0x0078, r24
  e4:	89 ea       	ldi	r24, 0xA9	; 169
  e6:	8f bd       	out	0x2f, r24	; 47
  e8:	8b e0       	ldi	r24, 0x0B	; 11
  ea:	8e bd       	out	0x2e, r24	; 46
  ec:	08 95       	ret

000000ee <main>:
// void setBlue( unsigned char blue)

// Main program: Counting on T1
int main( void )
{
	DDRB = 0xFF;					// set PORTB for compare output 
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	87 bb       	out	0x17, r24	; 23
	timer1Init();
  f2:	ee df       	rcall	.-36     	; 0xd0 <timer1Init>
	wait(100);
  f4:	84 e6       	ldi	r24, 0x64	; 100
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	da df       	rcall	.-76     	; 0xae <wait>
}

// Set pulse width for RED on pin PB5, 0=off, 255=max
void setRed( unsigned char red )
{
	OCR1A = red;
  fa:	cc 24       	eor	r12, r12
  fc:	ca 94       	dec	r12
  fe:	d1 2c       	mov	r13, r1
	OCR1B = green;
}

void setBlue( unsigned char blue )
{
	OCR1C = blue;
 100:	0f 2e       	mov	r0, r31
 102:	f8 e7       	ldi	r31, 0x78	; 120
 104:	ef 2e       	mov	r14, r31
 106:	f1 2c       	mov	r15, r1
 108:	f0 2d       	mov	r31, r0
	timer1Init();
	wait(100);

	while (1)
	{
		int deltaRed = 1;
 10a:	aa 24       	eor	r10, r10
 10c:	a3 94       	inc	r10
 10e:	b1 2c       	mov	r11, r1
 110:	91 2c       	mov	r9, r1
 112:	81 2c       	mov	r8, r1
}

// Set pulse width for RED on pin PB5, 0=off, 255=max
void setRed( unsigned char red )
{
	OCR1A = red;
 114:	db bc       	out	0x2b, r13	; 43
 116:	ca bc       	out	0x2a, r12	; 42
}

void setGreen( unsigned char green )
{
	OCR1B = green;
 118:	d9 bc       	out	0x29, r13	; 41
 11a:	c8 bc       	out	0x28, r12	; 40
}

void setBlue( unsigned char blue )
{
	OCR1C = blue;
 11c:	f7 01       	movw	r30, r14
 11e:	d1 82       	std	Z+1, r13	; 0x01
 120:	c0 82       	st	Z, r12
		setRed (255);
		setGreen(255);
		setBlue(255);
		// change some colors
		// RED
		for (int red = 255; red>=0; red-=deltaRed)
 122:	86 01       	movw	r16, r12
	timer1Init();
	wait(100);

	while (1)
	{
		int deltaRed = 1;
 124:	ca 2d       	mov	r28, r10
 126:	db 2d       	mov	r29, r11
 128:	c8 01       	movw	r24, r16
 12a:	99 27       	eor	r25, r25
}

// Set pulse width for RED on pin PB5, 0=off, 255=max
void setRed( unsigned char red )
{
	OCR1A = red;
 12c:	9b bd       	out	0x2b, r25	; 43
 12e:	8a bd       	out	0x2a, r24	; 42
		// change some colors
		// RED
		for (int red = 255; red>=0; red-=deltaRed)
		{
			setRed( red );				// 8-bits PWM on pin OCR1a 
			deltaRed += 2;					// progressive steps up
 130:	22 96       	adiw	r28, 0x02	; 2
			wait(10);					// delay of 100 ms (busy waiting)
 132:	8a e0       	ldi	r24, 0x0A	; 10
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	bb df       	rcall	.-138    	; 0xae <wait>
		setRed (255);
		setGreen(255);
		setBlue(255);
		// change some colors
		// RED
		for (int red = 255; red>=0; red-=deltaRed)
 138:	0c 1b       	sub	r16, r28
 13a:	1d 0b       	sbc	r17, r29
 13c:	aa f7       	brpl	.-22     	; 0x128 <main+0x3a>
 13e:	09 2d       	mov	r16, r9
 140:	18 2d       	mov	r17, r8
 142:	c8 01       	movw	r24, r16
 144:	99 27       	eor	r25, r25
}

// Set pulse width for RED on pin PB5, 0=off, 255=max
void setRed( unsigned char red )
{
	OCR1A = red;
 146:	9b bd       	out	0x2b, r25	; 43
 148:	8a bd       	out	0x2a, r24	; 42
			wait(10);					// delay of 100 ms (busy waiting)
		}
		for (int red = 0; red<=255; red+=deltaRed)
		{
			setRed( red );				// 8-bits PWM on pin OCR1a 
			deltaRed -= 2;					// progressive steps down
 14a:	22 97       	sbiw	r28, 0x02	; 2
			wait(10);					// delay of 100 ms (busy waiting)
 14c:	8a e0       	ldi	r24, 0x0A	; 10
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	ae df       	rcall	.-164    	; 0xae <wait>
		{
			setRed( red );				// 8-bits PWM on pin OCR1a 
			deltaRed += 2;					// progressive steps up
			wait(10);					// delay of 100 ms (busy waiting)
		}
		for (int red = 0; red<=255; red+=deltaRed)
 152:	0c 0f       	add	r16, r28
 154:	1d 1f       	adc	r17, r29
 156:	0f 3f       	cpi	r16, 0xFF	; 255
 158:	11 05       	cpc	r17, r1
 15a:	99 f3       	breq	.-26     	; 0x142 <main+0x54>
 15c:	94 f3       	brlt	.-28     	; 0x142 <main+0x54>
			deltaRed -= 2;					// progressive steps down
			wait(10);					// delay of 100 ms (busy waiting)
		}
		//setRed( 0 );
		deltaRed = 1;
		wait(100);
 15e:	84 e6       	ldi	r24, 0x64	; 100
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	a5 df       	rcall	.-182    	; 0xae <wait>

		for (int green = 255; green>=0; green-=deltaGreen)
 164:	86 01       	movw	r16, r12
	wait(100);

	while (1)
	{
		int deltaRed = 1;
		int deltaGreen = 1;
 166:	ca 2d       	mov	r28, r10
 168:	db 2d       	mov	r29, r11
 16a:	c8 01       	movw	r24, r16
 16c:	99 27       	eor	r25, r25
	OCR1A = red;
}

void setGreen( unsigned char green )
{
	OCR1B = green;
 16e:	99 bd       	out	0x29, r25	; 41
 170:	88 bd       	out	0x28, r24	; 40
		wait(100);

		for (int green = 255; green>=0; green-=deltaGreen)
		{
			setGreen( green );				// 8-bits PWM on pin OCR1a
			deltaGreen += 2;					// progressive steps up
 172:	22 96       	adiw	r28, 0x02	; 2
			wait(10);					// delay of 100 ms (busy waiting)
 174:	8a e0       	ldi	r24, 0x0A	; 10
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	9a df       	rcall	.-204    	; 0xae <wait>
		}
		//setRed( 0 );
		deltaRed = 1;
		wait(100);

		for (int green = 255; green>=0; green-=deltaGreen)
 17a:	0c 1b       	sub	r16, r28
 17c:	1d 0b       	sbc	r17, r29
 17e:	aa f7       	brpl	.-22     	; 0x16a <main+0x7c>
 180:	09 2d       	mov	r16, r9
 182:	18 2d       	mov	r17, r8
 184:	c8 01       	movw	r24, r16
 186:	99 27       	eor	r25, r25
	OCR1A = red;
}

void setGreen( unsigned char green )
{
	OCR1B = green;
 188:	99 bd       	out	0x29, r25	; 41
 18a:	88 bd       	out	0x28, r24	; 40
			wait(10);					// delay of 100 ms (busy waiting)
		}
		for (int green = 0; green<=255; green+=deltaGreen)
		{
			setGreen( green );				// 8-bits PWM on pin OCR1a
			deltaGreen -= 2;					// progressive steps down
 18c:	22 97       	sbiw	r28, 0x02	; 2
			wait(10);					// delay of 100 ms (busy waiting)
 18e:	8a e0       	ldi	r24, 0x0A	; 10
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	8d df       	rcall	.-230    	; 0xae <wait>
		{
			setGreen( green );				// 8-bits PWM on pin OCR1a
			deltaGreen += 2;					// progressive steps up
			wait(10);					// delay of 100 ms (busy waiting)
		}
		for (int green = 0; green<=255; green+=deltaGreen)
 194:	0c 0f       	add	r16, r28
 196:	1d 1f       	adc	r17, r29
 198:	0f 3f       	cpi	r16, 0xFF	; 255
 19a:	11 05       	cpc	r17, r1
 19c:	99 f3       	breq	.-26     	; 0x184 <main+0x96>
 19e:	94 f3       	brlt	.-28     	; 0x184 <main+0x96>
			deltaGreen -= 2;					// progressive steps down
			wait(10);					// delay of 100 ms (busy waiting)
		}
		//setRed( 0 );
		deltaGreen = 1;
		wait(100);
 1a0:	84 e6       	ldi	r24, 0x64	; 100
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	84 df       	rcall	.-248    	; 0xae <wait>

		for (int blue = 255; blue>=0; blue-=deltaBlue)
 1a6:	86 01       	movw	r16, r12

	while (1)
	{
		int deltaRed = 1;
		int deltaGreen = 1;
		int deltaBlue = 1;
 1a8:	ca 2d       	mov	r28, r10
 1aa:	db 2d       	mov	r29, r11
 1ac:	c8 01       	movw	r24, r16
 1ae:	99 27       	eor	r25, r25
	OCR1B = green;
}

void setBlue( unsigned char blue )
{
	OCR1C = blue;
 1b0:	f7 01       	movw	r30, r14
 1b2:	91 83       	std	Z+1, r25	; 0x01
 1b4:	80 83       	st	Z, r24
		wait(100);

		for (int blue = 255; blue>=0; blue-=deltaBlue)
		{
			setBlue( blue );				// 8-bits PWM on pin OCR1a
			deltaBlue += 2;					// progressive steps up
 1b6:	22 96       	adiw	r28, 0x02	; 2
			wait(10);					// delay of 100 ms (busy waiting)
 1b8:	8a e0       	ldi	r24, 0x0A	; 10
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	78 df       	rcall	.-272    	; 0xae <wait>
		}
		//setRed( 0 );
		deltaGreen = 1;
		wait(100);

		for (int blue = 255; blue>=0; blue-=deltaBlue)
 1be:	0c 1b       	sub	r16, r28
 1c0:	1d 0b       	sbc	r17, r29
 1c2:	a2 f7       	brpl	.-24     	; 0x1ac <main+0xbe>
 1c4:	09 2d       	mov	r16, r9
 1c6:	18 2d       	mov	r17, r8
 1c8:	c8 01       	movw	r24, r16
 1ca:	99 27       	eor	r25, r25
	OCR1B = green;
}

void setBlue( unsigned char blue )
{
	OCR1C = blue;
 1cc:	f7 01       	movw	r30, r14
 1ce:	91 83       	std	Z+1, r25	; 0x01
 1d0:	80 83       	st	Z, r24
			wait(10);					// delay of 100 ms (busy waiting)
		}
		for (int blue = 0; blue<=255; blue+=deltaBlue)
		{
			setBlue( blue );				// 8-bits PWM on pin OCR1a
			deltaBlue -= 2;					// progressive steps down
 1d2:	22 97       	sbiw	r28, 0x02	; 2
			wait(10);					// delay of 100 ms (busy waiting)
 1d4:	8a e0       	ldi	r24, 0x0A	; 10
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	6a df       	rcall	.-300    	; 0xae <wait>
		{
			setBlue( blue );				// 8-bits PWM on pin OCR1a
			deltaBlue += 2;					// progressive steps up
			wait(10);					// delay of 100 ms (busy waiting)
		}
		for (int blue = 0; blue<=255; blue+=deltaBlue)
 1da:	0c 0f       	add	r16, r28
 1dc:	1d 1f       	adc	r17, r29
 1de:	0f 3f       	cpi	r16, 0xFF	; 255
 1e0:	11 05       	cpc	r17, r1
 1e2:	91 f3       	breq	.-28     	; 0x1c8 <main+0xda>
 1e4:	8c f3       	brlt	.-30     	; 0x1c8 <main+0xda>
			deltaBlue -= 2;					// progressive steps down
			wait(10);					// delay of 100 ms (busy waiting)
		}
		//setRed( 0 );
		deltaBlue = 1;
		wait(100);
 1e6:	84 e6       	ldi	r24, 0x64	; 100
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	61 df       	rcall	.-318    	; 0xae <wait>


		// WHITE
		// for (int white = 0; white<=255; white += delta)
		// . . .
	} 
 1ec:	93 cf       	rjmp	.-218    	; 0x114 <main+0x26>

000001ee <_exit>:
 1ee:	f8 94       	cli

000001f0 <__stop_program>:
 1f0:	ff cf       	rjmp	.-2      	; 0x1f0 <__stop_program>
