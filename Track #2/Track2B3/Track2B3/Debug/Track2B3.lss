
Track2B3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000136  000001aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000136  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001df  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000014c  00000000  00000000  0000043b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004b6  00000000  00000000  00000587  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000a40  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010e7b  00000000  00000000  00000a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e7  00000000  00000000  000118ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000119e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000002e4  00000000  00000000  00011a06  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e3       	ldi	r30, 0x36	; 54
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	1f d0       	rcall	.+62     	; 0xf2 <main>
  b4:	3e c0       	rjmp	.+124    	; 0x132 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <wait>:
{
	0x3F,0x06,0x5B,0x4f,0x66,0x6D,0x7D,0x07,0xFF,0xEF,0x77,0x7C,0x39,0x5E,0x79,0x71 //alle waardes voor alle cijfers
};

	void wait(int ms){
		for (int i = 0; i<ms; i++)
  b8:	18 16       	cp	r1, r24
  ba:	19 06       	cpc	r1, r25
  bc:	6c f4       	brge	.+26     	; 0xd8 <wait+0x20>
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	e9 ef       	ldi	r30, 0xF9	; 249
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	31 97       	sbiw	r30, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <wait+0xe>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <wait+0x14>
  cc:	00 00       	nop
  ce:	2f 5f       	subi	r18, 0xFF	; 255
  d0:	3f 4f       	sbci	r19, 0xFF	; 255
  d2:	28 17       	cp	r18, r24
  d4:	39 07       	cpc	r19, r25
  d6:	a9 f7       	brne	.-22     	; 0xc2 <wait+0xa>
  d8:	08 95       	ret

000000da <display>:
			_delay_ms( 1 );
		}
	}
	
	void display(int i){ // een functie voor de lookuptable
		if(0 <= i && i <=15){
  da:	80 31       	cpi	r24, 0x10	; 16
  dc:	91 05       	cpc	r25, r1
  de:	30 f4       	brcc	.+12     	; 0xec <display+0x12>
		PORTD = lookuptable[i];
  e0:	fc 01       	movw	r30, r24
  e2:	e0 50       	subi	r30, 0x00	; 0
  e4:	ff 4f       	sbci	r31, 0xFF	; 255
  e6:	80 81       	ld	r24, Z
  e8:	82 bb       	out	0x12, r24	; 18
  ea:	08 95       	ret
		}
		else
		PORTD = 0x79;
  ec:	89 e7       	ldi	r24, 0x79	; 121
  ee:	82 bb       	out	0x12, r24	; 18
  f0:	08 95       	ret

000000f2 <main>:
	}
	
int main (void)
{

	DDRC = 0b00000000;
  f2:	14 ba       	out	0x14, r1	; 20
	DDRD = 0b11111111;
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	81 bb       	out	0x11, r24	; 17
	int i = 0;
  f8:	c0 e0       	ldi	r28, 0x00	; 0
  fa:	d0 e0       	ldi	r29, 0x00	; 0
	while (1)
	{
		display(i);
		wait (100);
		if ( PINC & 0x01 && PINC & 0x02){
			i = 0;
  fc:	00 e0       	ldi	r16, 0x00	; 0
  fe:	10 e0       	ldi	r17, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <main+0x14>
 102:	c0 2f       	mov	r28, r16
 104:	d1 2f       	mov	r29, r17
	DDRC = 0b00000000;
	DDRD = 0b11111111;
	int i = 0;
	while (1)
	{
		display(i);
 106:	ce 01       	movw	r24, r28
 108:	e8 df       	rcall	.-48     	; 0xda <display>
		wait (100);
 10a:	84 e6       	ldi	r24, 0x64	; 100
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	d4 df       	rcall	.-88     	; 0xb8 <wait>
		if ( PINC & 0x01 && PINC & 0x02){
 110:	98 9b       	sbis	0x13, 0	; 19
 112:	02 c0       	rjmp	.+4      	; 0x118 <main+0x26>
 114:	99 99       	sbic	0x13, 1	; 19
 116:	f5 cf       	rjmp	.-22     	; 0x102 <main+0x10>
			i = 0;
		}
		else if(PINC & 0x01)
 118:	98 9b       	sbis	0x13, 0	; 19
 11a:	05 c0       	rjmp	.+10     	; 0x126 <main+0x34>
		{
			if(i <= 15)
 11c:	c0 31       	cpi	r28, 0x10	; 16
 11e:	d1 05       	cpc	r29, r1
 120:	94 f7       	brge	.-28     	; 0x106 <main+0x14>
			i++;
 122:	21 96       	adiw	r28, 0x01	; 1
 124:	f0 cf       	rjmp	.-32     	; 0x106 <main+0x14>
		}
		else if(PINC & 0x02)
 126:	99 9b       	sbis	0x13, 1	; 19
 128:	ee cf       	rjmp	.-36     	; 0x106 <main+0x14>
		{
			if (i >= 0)
 12a:	dd 23       	and	r29, r29
 12c:	64 f3       	brlt	.-40     	; 0x106 <main+0x14>
			i--;
 12e:	21 97       	sbiw	r28, 0x01	; 1
 130:	ea cf       	rjmp	.-44     	; 0x106 <main+0x14>

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
