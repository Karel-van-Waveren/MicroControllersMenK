
Scrollingtext.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000578  0000060c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000578  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080011e  0080011e  0000062a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000062a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000065c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000698  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000572  00000000  00000000  00000700  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000265  00000000  00000000  00000c72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000545  00000000  00000000  00000ed7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  0000141c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000074c5  00000000  00000000  00001518  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000398  00000000  00000000  000089dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00008d75  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000003f2  00000000  00000000  00008de5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e7       	ldi	r30, 0x78	; 120
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 31       	cpi	r26, 0x1E	; 30
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e1       	ldi	r26, 0x1E	; 30
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 32       	cpi	r26, 0x24	; 36
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	79 d0       	rcall	.+242    	; 0x1b6 <main>
  c4:	57 c2       	rjmp	.+1198   	; 0x574 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <twi_init>:
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
  c8:	10 92 71 00 	sts	0x0071, r1
  cc:	80 e2       	ldi	r24, 0x20	; 32
  ce:	80 93 70 00 	sts	0x0070, r24
  d2:	08 95       	ret

000000d4 <twi_start>:
  d4:	84 ea       	ldi	r24, 0xA4	; 164
  d6:	80 93 74 00 	sts	0x0074, r24
  da:	e4 e7       	ldi	r30, 0x74	; 116
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	88 23       	and	r24, r24
  e2:	ec f7       	brge	.-6      	; 0xde <twi_start+0xa>
  e4:	08 95       	ret

000000e6 <twi_tx>:
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWDR = data;
  e6:	80 93 73 00 	sts	0x0073, r24
	TWCR = (0x80 | 0x04);
  ea:	84 e8       	ldi	r24, 0x84	; 132
  ec:	80 93 74 00 	sts	0x0074, r24
	while( 0 == (TWCR & 0x80) );
  f0:	e4 e7       	ldi	r30, 0x74	; 116
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	88 23       	and	r24, r24
  f8:	ec f7       	brge	.-6      	; 0xf4 <twi_tx+0xe>
}
  fa:	08 95       	ret

000000fc <wait>:
				clock value is set. This is used by _delay_ms inside
				util/delay.h
Version :    	DMK, Initial code
*******************************************************************/
{
	for (int i=0; i<ms; i++)
  fc:	18 16       	cp	r1, r24
  fe:	19 06       	cpc	r1, r25
 100:	6c f4       	brge	.+26     	; 0x11c <wait+0x20>
 102:	20 e0       	ldi	r18, 0x00	; 0
 104:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 106:	e9 ef       	ldi	r30, 0xF9	; 249
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	31 97       	sbiw	r30, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <wait+0xe>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <wait+0x14>
 110:	00 00       	nop
 112:	2f 5f       	subi	r18, 0xFF	; 255
 114:	3f 4f       	sbci	r19, 0xFF	; 255
 116:	28 17       	cp	r18, r24
 118:	39 07       	cpc	r19, r25
 11a:	a9 f7       	brne	.-22     	; 0x106 <wait+0xa>
 11c:	08 95       	ret

0000011e <write>:
	0b01110111101110,
	0b00000000000000,
};
int * p;

int write(unsigned char data, unsigned char address){
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	c8 2f       	mov	r28, r24
 124:	d6 2f       	mov	r29, r22
	twi_start();
 126:	d6 df       	rcall	.-84     	; 0xd4 <twi_start>
	twi_tx(0xE0);		// Display I2C addres + R/W bit
 128:	80 ee       	ldi	r24, 0xE0	; 224
 12a:	dd df       	rcall	.-70     	; 0xe6 <twi_tx>
	twi_tx(address);	// Address
 12c:	8d 2f       	mov	r24, r29
 12e:	db df       	rcall	.-74     	; 0xe6 <twi_tx>
	twi_tx(data);		// data
 130:	8c 2f       	mov	r24, r28
 132:	d9 df       	rcall	.-78     	; 0xe6 <twi_tx>
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 134:	84 e9       	ldi	r24, 0x94	; 148
 136:	80 93 74 00 	sts	0x0074, r24
	twi_start();
	twi_tx(0xE0);		// Display I2C addres + R/W bit
	twi_tx(address);	// Address
	twi_tx(data);		// data
	twi_stop();
}
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <writev2>:

int writev2(unsigned char data)
{
 140:	cf 93       	push	r28
 142:	c8 2f       	mov	r28, r24
	twi_start();
 144:	c7 df       	rcall	.-114    	; 0xd4 <twi_start>
	twi_tx(0xE0);		// Display I2C addres + R/W bit
 146:	80 ee       	ldi	r24, 0xE0	; 224
 148:	ce df       	rcall	.-100    	; 0xe6 <twi_tx>
	twi_tx(data);		// data
 14a:	8c 2f       	mov	r24, r28
 14c:	cc df       	rcall	.-104    	; 0xe6 <twi_tx>
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 14e:	84 e9       	ldi	r24, 0x94	; 148
 150:	80 93 74 00 	sts	0x0074, r24
{
	twi_start();
	twi_tx(0xE0);		// Display I2C addres + R/W bit
	twi_tx(data);		// data
	twi_stop();	
}
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <resetdisplay>:
	
void resetdisplay()
{
 158:	0f 93       	push	r16
 15a:	1f 93       	push	r17
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	c6 e1       	ldi	r28, 0x16	; 22
 162:	d1 e0       	ldi	r29, 0x01	; 1
 164:	0e e1       	ldi	r16, 0x1E	; 30
 166:	11 e0       	ldi	r17, 0x01	; 1
	int i;
	for(i =0;i < 8; i++)
		write(0x00,res[i]);
 168:	69 91       	ld	r22, Y+
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	d8 df       	rcall	.-80     	; 0x11e <write>
}
	
void resetdisplay()
{
	int i;
	for(i =0;i < 8; i++)
 16e:	c0 17       	cp	r28, r16
 170:	d1 07       	cpc	r29, r17
 172:	d1 f7       	brne	.-12     	; 0x168 <resetdisplay+0x10>
		write(0x00,res[i]);
}
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	1f 91       	pop	r17
 17a:	0f 91       	pop	r16
 17c:	08 95       	ret

0000017e <intdup>:

int * intdup(int const * src, int len)
{
 17e:	ef 92       	push	r14
 180:	ff 92       	push	r15
 182:	0f 93       	push	r16
 184:	1f 93       	push	r17
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	7c 01       	movw	r14, r24
	p = malloc(len * sizeof(int));
 18c:	eb 01       	movw	r28, r22
 18e:	cc 0f       	add	r28, r28
 190:	dd 1f       	adc	r29, r29
 192:	ce 01       	movw	r24, r28
 194:	b9 d0       	rcall	.+370    	; 0x308 <malloc>
 196:	8c 01       	movw	r16, r24
 198:	90 93 1f 01 	sts	0x011F, r25
 19c:	80 93 1e 01 	sts	0x011E, r24
	memcpy(p, src, len * sizeof(int));
 1a0:	ae 01       	movw	r20, r28
 1a2:	b7 01       	movw	r22, r14
 1a4:	de d1       	rcall	.+956    	; 0x562 <memcpy>
	return p;
}
 1a6:	c8 01       	movw	r24, r16
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	1f 91       	pop	r17
 1ae:	0f 91       	pop	r16
 1b0:	ff 90       	pop	r15
 1b2:	ef 90       	pop	r14
 1b4:	08 95       	ret

000001b6 <main>:
notes:			Looping forever, trashing the HT16K33
Version :    	DMK, Initial code
*******************************************************************/
{
	
	twi_init();		// Init TWI interface
 1b6:	88 df       	rcall	.-240    	; 0xc8 <twi_init>

	// Init HT16K22. Page 32 datasheet
	writev2(0x21);	// Internal osc on (page 10 HT16K33)
 1b8:	81 e2       	ldi	r24, 0x21	; 33
 1ba:	c2 df       	rcall	.-124    	; 0x140 <writev2>
	
	writev2(0xA0);	// HT16K33 pins all output
 1bc:	80 ea       	ldi	r24, 0xA0	; 160
 1be:	c0 df       	rcall	.-128    	; 0x140 <writev2>

	writev2(0xE3);	// Display Dimming 4/16 duty cycle
 1c0:	83 ee       	ldi	r24, 0xE3	; 227
 1c2:	be df       	rcall	.-132    	; 0x140 <writev2>
	
	writev2(0x81);	// Display OFF - Blink On
 1c4:	81 e8       	ldi	r24, 0x81	; 129
 1c6:	bc df       	rcall	.-136    	; 0x140 <writev2>
	
	
	int bitshift=0, j, idx;
 1c8:	00 e0       	ldi	r16, 0x00	; 0
 1ca:	10 e0       	ldi	r17, 0x00	; 0
		{
			int data = copy[idx];
			int x = (data >> bitshift) & 1;
			data = copy[idx]>>1;
			if (x == 1)
				data |= 1 << (bitshift+7);
 1cc:	ee 24       	eor	r14, r14
 1ce:	e3 94       	inc	r14
 1d0:	f1 2c       	mov	r15, r1
 1d2:	0f 2e       	mov	r0, r31
 1d4:	f6 e1       	ldi	r31, 0x16	; 22
 1d6:	6f 2e       	mov	r6, r31
 1d8:	f1 e0       	ldi	r31, 0x01	; 1
 1da:	7f 2e       	mov	r7, r31
 1dc:	f0 2d       	mov	r31, r0
		resetdisplay();
		copy = intdup(text,14);
		free(p);

		
		for (idx = 0; idx < 8; idx++)
 1de:	b1 2c       	mov	r11, r1
 1e0:	a1 2c       	mov	r10, r1
	
	int bitshift=0, j, idx;
	int* copy;
	while (1)
	{
		resetdisplay();
 1e2:	ba df       	rcall	.-140    	; 0x158 <resetdisplay>
		copy = intdup(text,14);
 1e4:	6e e0       	ldi	r22, 0x0E	; 14
 1e6:	70 e0       	ldi	r23, 0x00	; 0
 1e8:	86 e0       	ldi	r24, 0x06	; 6
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	c8 df       	rcall	.-112    	; 0x17e <intdup>
 1ee:	ec 01       	movw	r28, r24
		free(p);
 1f0:	80 91 1e 01 	lds	r24, 0x011E
 1f4:	90 91 1f 01 	lds	r25, 0x011F
 1f8:	1c d1       	rcall	.+568    	; 0x432 <free>
		{
			int data = copy[idx];
			int x = (data >> bitshift) & 1;
			data = copy[idx]>>1;
			if (x == 1)
				data |= 1 << (bitshift+7);
 1fa:	c8 01       	movw	r24, r16
 1fc:	07 96       	adiw	r24, 0x07	; 7
 1fe:	d7 01       	movw	r26, r14
 200:	02 c0       	rjmp	.+4      	; 0x206 <main+0x50>
 202:	aa 0f       	add	r26, r26
 204:	bb 1f       	adc	r27, r27
 206:	8a 95       	dec	r24
 208:	e2 f7       	brpl	.-8      	; 0x202 <main+0x4c>
			else
				data &= ~(1 << (bitshift+7));
 20a:	bd 01       	movw	r22, r26
 20c:	60 95       	com	r22
 20e:	70 95       	com	r23
 210:	6e 01       	movw	r12, r28
 212:	ae 01       	movw	r20, r28
 214:	40 5f       	subi	r20, 0xF0	; 240
 216:	5f 4f       	sbci	r21, 0xFF	; 255
 218:	fe 01       	movw	r30, r28
 21a:	ef 01       	movw	r28, r30
		free(p);

		
		for (idx = 0; idx < 8; idx++)
		{
			int data = copy[idx];
 21c:	80 81       	ld	r24, Z
 21e:	91 81       	ldd	r25, Z+1	; 0x01
			int x = (data >> bitshift) & 1;
			data = copy[idx]>>1;
 220:	9c 01       	movw	r18, r24
 222:	35 95       	asr	r19
 224:	27 95       	ror	r18

		
		for (idx = 0; idx < 8; idx++)
		{
			int data = copy[idx];
			int x = (data >> bitshift) & 1;
 226:	00 2e       	mov	r0, r16
 228:	02 c0       	rjmp	.+4      	; 0x22e <main+0x78>
 22a:	95 95       	asr	r25
 22c:	87 95       	ror	r24
 22e:	0a 94       	dec	r0
 230:	e2 f7       	brpl	.-8      	; 0x22a <main+0x74>
			data = copy[idx]>>1;
			if (x == 1)
 232:	80 ff       	sbrs	r24, 0
 234:	03 c0       	rjmp	.+6      	; 0x23c <main+0x86>
				data |= 1 << (bitshift+7);
 236:	2a 2b       	or	r18, r26
 238:	3b 2b       	or	r19, r27
 23a:	02 c0       	rjmp	.+4      	; 0x240 <main+0x8a>
			else
				data &= ~(1 << (bitshift+7));
 23c:	26 23       	and	r18, r22
 23e:	37 23       	and	r19, r23
			copy[idx] = data;
 240:	39 83       	std	Y+1, r19	; 0x01
 242:	28 83       	st	Y, r18
 244:	32 96       	adiw	r30, 0x02	; 2
		resetdisplay();
		copy = intdup(text,14);
		free(p);

		
		for (idx = 0; idx < 8; idx++)
 246:	e4 17       	cp	r30, r20
 248:	f5 07       	cpc	r31, r21
 24a:	39 f7       	brne	.-50     	; 0x21a <main+0x64>
 24c:	e3 01       	movw	r28, r6
 24e:	8b 2c       	mov	r8, r11
 250:	9a 2c       	mov	r9, r10
				data &= ~(1 << (bitshift+7));
			copy[idx] = data;
		}

	for(j = 0;j < 8;j++)
		if(bitshift == 10 && j < 7 && j > 1)
 252:	0a 30       	cpi	r16, 0x0A	; 10
 254:	11 05       	cpc	r17, r1
 256:	61 f4       	brne	.+24     	; 0x270 <main+0xba>
 258:	c4 01       	movw	r24, r8
 25a:	02 97       	sbiw	r24, 0x02	; 2
 25c:	05 97       	sbiw	r24, 0x05	; 5
 25e:	50 f5       	brcc	.+84     	; 0x2b4 <main+0xfe>
			write(copy[j]>>bitshift|0x80,res[j]);	
 260:	f6 01       	movw	r30, r12
 262:	81 81       	ldd	r24, Z+1	; 0x01
 264:	85 95       	asr	r24
 266:	85 95       	asr	r24
 268:	68 81       	ld	r22, Y
 26a:	80 68       	ori	r24, 0x80	; 128
 26c:	58 df       	rcall	.-336    	; 0x11e <write>
 26e:	2d c0       	rjmp	.+90     	; 0x2ca <main+0x114>
		else if (bitshift == 11 && j < 7 && j > 5)
 270:	0b 30       	cpi	r16, 0x0B	; 11
 272:	11 05       	cpc	r17, r1
 274:	69 f4       	brne	.+26     	; 0x290 <main+0xda>
 276:	f6 e0       	ldi	r31, 0x06	; 6
 278:	8f 16       	cp	r8, r31
 27a:	91 04       	cpc	r9, r1
 27c:	d9 f4       	brne	.+54     	; 0x2b4 <main+0xfe>
			write(copy[j]>>bitshift|0x80,res[j]);
 27e:	f6 01       	movw	r30, r12
 280:	81 81       	ldd	r24, Z+1	; 0x01
 282:	85 95       	asr	r24
 284:	85 95       	asr	r24
 286:	85 95       	asr	r24
 288:	68 81       	ld	r22, Y
 28a:	80 68       	ori	r24, 0x80	; 128
 28c:	48 df       	rcall	.-368    	; 0x11e <write>
 28e:	34 c0       	rjmp	.+104    	; 0x2f8 <main+0x142>
		else if (bitshift == 12 && j < 7 && j > 5)
 290:	0c 30       	cpi	r16, 0x0C	; 12
 292:	11 05       	cpc	r17, r1
 294:	79 f4       	brne	.+30     	; 0x2b4 <main+0xfe>
 296:	f6 e0       	ldi	r31, 0x06	; 6
 298:	8f 16       	cp	r8, r31
 29a:	91 04       	cpc	r9, r1
 29c:	59 f4       	brne	.+22     	; 0x2b4 <main+0xfe>
			write(copy[j]>>bitshift+1|0x80,res[j]);
 29e:	f6 01       	movw	r30, r12
 2a0:	81 81       	ldd	r24, Z+1	; 0x01
 2a2:	85 95       	asr	r24
 2a4:	85 95       	asr	r24
 2a6:	85 95       	asr	r24
 2a8:	85 95       	asr	r24
 2aa:	85 95       	asr	r24
 2ac:	68 81       	ld	r22, Y
 2ae:	80 68       	ori	r24, 0x80	; 128
 2b0:	36 df       	rcall	.-404    	; 0x11e <write>
 2b2:	22 c0       	rjmp	.+68     	; 0x2f8 <main+0x142>
		else
			write(copy[j]>>bitshift,res[j]);
 2b4:	f6 01       	movw	r30, r12
 2b6:	80 81       	ld	r24, Z
 2b8:	91 81       	ldd	r25, Z+1	; 0x01
 2ba:	00 2e       	mov	r0, r16
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <main+0x10c>
 2be:	95 95       	asr	r25
 2c0:	87 95       	ror	r24
 2c2:	0a 94       	dec	r0
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <main+0x108>
 2c6:	68 81       	ld	r22, Y
 2c8:	2a df       	rcall	.-428    	; 0x11e <write>
			else
				data &= ~(1 << (bitshift+7));
			copy[idx] = data;
		}

	for(j = 0;j < 8;j++)
 2ca:	ff ef       	ldi	r31, 0xFF	; 255
 2cc:	8f 1a       	sub	r8, r31
 2ce:	9f 0a       	sbc	r9, r31
 2d0:	21 96       	adiw	r28, 0x01	; 1
 2d2:	82 e0       	ldi	r24, 0x02	; 2
 2d4:	c8 0e       	add	r12, r24
 2d6:	d1 1c       	adc	r13, r1
 2d8:	e8 e0       	ldi	r30, 0x08	; 8
 2da:	8e 16       	cp	r8, r30
 2dc:	91 04       	cpc	r9, r1
 2de:	09 f0       	breq	.+2      	; 0x2e2 <main+0x12c>
 2e0:	b8 cf       	rjmp	.-144    	; 0x252 <main+0x9c>
		else if (bitshift == 12 && j < 7 && j > 5)
			write(copy[j]>>bitshift+1|0x80,res[j]);
		else
			write(copy[j]>>bitshift,res[j]);
		
	bitshift++;	
 2e2:	0f 5f       	subi	r16, 0xFF	; 255
 2e4:	1f 4f       	sbci	r17, 0xFF	; 255
	
	if (bitshift > 14)
 2e6:	0f 30       	cpi	r16, 0x0F	; 15
 2e8:	11 05       	cpc	r17, r1
 2ea:	14 f0       	brlt	.+4      	; 0x2f0 <main+0x13a>
	bitshift = 0;
 2ec:	0b 2d       	mov	r16, r11
 2ee:	1a 2d       	mov	r17, r10
	
	wait(200);
 2f0:	88 ec       	ldi	r24, 0xC8	; 200
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	03 df       	rcall	.-506    	; 0xfc <wait>
	}
 2f6:	75 cf       	rjmp	.-278    	; 0x1e2 <main+0x2c>
			else
				data &= ~(1 << (bitshift+7));
			copy[idx] = data;
		}

	for(j = 0;j < 8;j++)
 2f8:	ff ef       	ldi	r31, 0xFF	; 255
 2fa:	8f 1a       	sub	r8, r31
 2fc:	9f 0a       	sbc	r9, r31
 2fe:	21 96       	adiw	r28, 0x01	; 1
 300:	82 e0       	ldi	r24, 0x02	; 2
 302:	c8 0e       	add	r12, r24
 304:	d1 1c       	adc	r13, r1
 306:	a5 cf       	rjmp	.-182    	; 0x252 <main+0x9c>

00000308 <malloc>:
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	82 30       	cpi	r24, 0x02	; 2
 30e:	91 05       	cpc	r25, r1
 310:	10 f4       	brcc	.+4      	; 0x316 <malloc+0xe>
 312:	82 e0       	ldi	r24, 0x02	; 2
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	e0 91 22 01 	lds	r30, 0x0122
 31a:	f0 91 23 01 	lds	r31, 0x0123
 31e:	20 e0       	ldi	r18, 0x00	; 0
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	c0 e0       	ldi	r28, 0x00	; 0
 324:	d0 e0       	ldi	r29, 0x00	; 0
 326:	30 97       	sbiw	r30, 0x00	; 0
 328:	11 f1       	breq	.+68     	; 0x36e <malloc+0x66>
 32a:	40 81       	ld	r20, Z
 32c:	51 81       	ldd	r21, Z+1	; 0x01
 32e:	48 17       	cp	r20, r24
 330:	59 07       	cpc	r21, r25
 332:	c0 f0       	brcs	.+48     	; 0x364 <malloc+0x5c>
 334:	48 17       	cp	r20, r24
 336:	59 07       	cpc	r21, r25
 338:	61 f4       	brne	.+24     	; 0x352 <malloc+0x4a>
 33a:	82 81       	ldd	r24, Z+2	; 0x02
 33c:	93 81       	ldd	r25, Z+3	; 0x03
 33e:	20 97       	sbiw	r28, 0x00	; 0
 340:	19 f0       	breq	.+6      	; 0x348 <malloc+0x40>
 342:	9b 83       	std	Y+3, r25	; 0x03
 344:	8a 83       	std	Y+2, r24	; 0x02
 346:	2b c0       	rjmp	.+86     	; 0x39e <malloc+0x96>
 348:	90 93 23 01 	sts	0x0123, r25
 34c:	80 93 22 01 	sts	0x0122, r24
 350:	26 c0       	rjmp	.+76     	; 0x39e <malloc+0x96>
 352:	21 15       	cp	r18, r1
 354:	31 05       	cpc	r19, r1
 356:	19 f0       	breq	.+6      	; 0x35e <malloc+0x56>
 358:	42 17       	cp	r20, r18
 35a:	53 07       	cpc	r21, r19
 35c:	18 f4       	brcc	.+6      	; 0x364 <malloc+0x5c>
 35e:	9a 01       	movw	r18, r20
 360:	be 01       	movw	r22, r28
 362:	df 01       	movw	r26, r30
 364:	ef 01       	movw	r28, r30
 366:	02 80       	ldd	r0, Z+2	; 0x02
 368:	f3 81       	ldd	r31, Z+3	; 0x03
 36a:	e0 2d       	mov	r30, r0
 36c:	dc cf       	rjmp	.-72     	; 0x326 <malloc+0x1e>
 36e:	21 15       	cp	r18, r1
 370:	31 05       	cpc	r19, r1
 372:	09 f1       	breq	.+66     	; 0x3b6 <malloc+0xae>
 374:	28 1b       	sub	r18, r24
 376:	39 0b       	sbc	r19, r25
 378:	24 30       	cpi	r18, 0x04	; 4
 37a:	31 05       	cpc	r19, r1
 37c:	90 f4       	brcc	.+36     	; 0x3a2 <malloc+0x9a>
 37e:	12 96       	adiw	r26, 0x02	; 2
 380:	8d 91       	ld	r24, X+
 382:	9c 91       	ld	r25, X
 384:	13 97       	sbiw	r26, 0x03	; 3
 386:	61 15       	cp	r22, r1
 388:	71 05       	cpc	r23, r1
 38a:	21 f0       	breq	.+8      	; 0x394 <malloc+0x8c>
 38c:	fb 01       	movw	r30, r22
 38e:	93 83       	std	Z+3, r25	; 0x03
 390:	82 83       	std	Z+2, r24	; 0x02
 392:	04 c0       	rjmp	.+8      	; 0x39c <malloc+0x94>
 394:	90 93 23 01 	sts	0x0123, r25
 398:	80 93 22 01 	sts	0x0122, r24
 39c:	fd 01       	movw	r30, r26
 39e:	32 96       	adiw	r30, 0x02	; 2
 3a0:	44 c0       	rjmp	.+136    	; 0x42a <malloc+0x122>
 3a2:	fd 01       	movw	r30, r26
 3a4:	e2 0f       	add	r30, r18
 3a6:	f3 1f       	adc	r31, r19
 3a8:	81 93       	st	Z+, r24
 3aa:	91 93       	st	Z+, r25
 3ac:	22 50       	subi	r18, 0x02	; 2
 3ae:	31 09       	sbc	r19, r1
 3b0:	2d 93       	st	X+, r18
 3b2:	3c 93       	st	X, r19
 3b4:	3a c0       	rjmp	.+116    	; 0x42a <malloc+0x122>
 3b6:	20 91 20 01 	lds	r18, 0x0120
 3ba:	30 91 21 01 	lds	r19, 0x0121
 3be:	23 2b       	or	r18, r19
 3c0:	41 f4       	brne	.+16     	; 0x3d2 <malloc+0xca>
 3c2:	20 91 02 01 	lds	r18, 0x0102
 3c6:	30 91 03 01 	lds	r19, 0x0103
 3ca:	30 93 21 01 	sts	0x0121, r19
 3ce:	20 93 20 01 	sts	0x0120, r18
 3d2:	20 91 00 01 	lds	r18, 0x0100
 3d6:	30 91 01 01 	lds	r19, 0x0101
 3da:	21 15       	cp	r18, r1
 3dc:	31 05       	cpc	r19, r1
 3de:	41 f4       	brne	.+16     	; 0x3f0 <malloc+0xe8>
 3e0:	2d b7       	in	r18, 0x3d	; 61
 3e2:	3e b7       	in	r19, 0x3e	; 62
 3e4:	40 91 04 01 	lds	r20, 0x0104
 3e8:	50 91 05 01 	lds	r21, 0x0105
 3ec:	24 1b       	sub	r18, r20
 3ee:	35 0b       	sbc	r19, r21
 3f0:	e0 91 20 01 	lds	r30, 0x0120
 3f4:	f0 91 21 01 	lds	r31, 0x0121
 3f8:	e2 17       	cp	r30, r18
 3fa:	f3 07       	cpc	r31, r19
 3fc:	a0 f4       	brcc	.+40     	; 0x426 <malloc+0x11e>
 3fe:	2e 1b       	sub	r18, r30
 400:	3f 0b       	sbc	r19, r31
 402:	28 17       	cp	r18, r24
 404:	39 07       	cpc	r19, r25
 406:	78 f0       	brcs	.+30     	; 0x426 <malloc+0x11e>
 408:	ac 01       	movw	r20, r24
 40a:	4e 5f       	subi	r20, 0xFE	; 254
 40c:	5f 4f       	sbci	r21, 0xFF	; 255
 40e:	24 17       	cp	r18, r20
 410:	35 07       	cpc	r19, r21
 412:	48 f0       	brcs	.+18     	; 0x426 <malloc+0x11e>
 414:	4e 0f       	add	r20, r30
 416:	5f 1f       	adc	r21, r31
 418:	50 93 21 01 	sts	0x0121, r21
 41c:	40 93 20 01 	sts	0x0120, r20
 420:	81 93       	st	Z+, r24
 422:	91 93       	st	Z+, r25
 424:	02 c0       	rjmp	.+4      	; 0x42a <malloc+0x122>
 426:	e0 e0       	ldi	r30, 0x00	; 0
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	cf 01       	movw	r24, r30
 42c:	df 91       	pop	r29
 42e:	cf 91       	pop	r28
 430:	08 95       	ret

00000432 <free>:
 432:	0f 93       	push	r16
 434:	1f 93       	push	r17
 436:	cf 93       	push	r28
 438:	df 93       	push	r29
 43a:	00 97       	sbiw	r24, 0x00	; 0
 43c:	09 f4       	brne	.+2      	; 0x440 <free+0xe>
 43e:	8c c0       	rjmp	.+280    	; 0x558 <free+0x126>
 440:	fc 01       	movw	r30, r24
 442:	32 97       	sbiw	r30, 0x02	; 2
 444:	13 82       	std	Z+3, r1	; 0x03
 446:	12 82       	std	Z+2, r1	; 0x02
 448:	00 91 22 01 	lds	r16, 0x0122
 44c:	10 91 23 01 	lds	r17, 0x0123
 450:	01 15       	cp	r16, r1
 452:	11 05       	cpc	r17, r1
 454:	81 f4       	brne	.+32     	; 0x476 <free+0x44>
 456:	20 81       	ld	r18, Z
 458:	31 81       	ldd	r19, Z+1	; 0x01
 45a:	82 0f       	add	r24, r18
 45c:	93 1f       	adc	r25, r19
 45e:	20 91 20 01 	lds	r18, 0x0120
 462:	30 91 21 01 	lds	r19, 0x0121
 466:	28 17       	cp	r18, r24
 468:	39 07       	cpc	r19, r25
 46a:	79 f5       	brne	.+94     	; 0x4ca <free+0x98>
 46c:	f0 93 21 01 	sts	0x0121, r31
 470:	e0 93 20 01 	sts	0x0120, r30
 474:	71 c0       	rjmp	.+226    	; 0x558 <free+0x126>
 476:	d8 01       	movw	r26, r16
 478:	40 e0       	ldi	r20, 0x00	; 0
 47a:	50 e0       	ldi	r21, 0x00	; 0
 47c:	ae 17       	cp	r26, r30
 47e:	bf 07       	cpc	r27, r31
 480:	50 f4       	brcc	.+20     	; 0x496 <free+0x64>
 482:	12 96       	adiw	r26, 0x02	; 2
 484:	2d 91       	ld	r18, X+
 486:	3c 91       	ld	r19, X
 488:	13 97       	sbiw	r26, 0x03	; 3
 48a:	ad 01       	movw	r20, r26
 48c:	21 15       	cp	r18, r1
 48e:	31 05       	cpc	r19, r1
 490:	09 f1       	breq	.+66     	; 0x4d4 <free+0xa2>
 492:	d9 01       	movw	r26, r18
 494:	f3 cf       	rjmp	.-26     	; 0x47c <free+0x4a>
 496:	9d 01       	movw	r18, r26
 498:	da 01       	movw	r26, r20
 49a:	33 83       	std	Z+3, r19	; 0x03
 49c:	22 83       	std	Z+2, r18	; 0x02
 49e:	60 81       	ld	r22, Z
 4a0:	71 81       	ldd	r23, Z+1	; 0x01
 4a2:	86 0f       	add	r24, r22
 4a4:	97 1f       	adc	r25, r23
 4a6:	82 17       	cp	r24, r18
 4a8:	93 07       	cpc	r25, r19
 4aa:	69 f4       	brne	.+26     	; 0x4c6 <free+0x94>
 4ac:	ec 01       	movw	r28, r24
 4ae:	28 81       	ld	r18, Y
 4b0:	39 81       	ldd	r19, Y+1	; 0x01
 4b2:	26 0f       	add	r18, r22
 4b4:	37 1f       	adc	r19, r23
 4b6:	2e 5f       	subi	r18, 0xFE	; 254
 4b8:	3f 4f       	sbci	r19, 0xFF	; 255
 4ba:	31 83       	std	Z+1, r19	; 0x01
 4bc:	20 83       	st	Z, r18
 4be:	8a 81       	ldd	r24, Y+2	; 0x02
 4c0:	9b 81       	ldd	r25, Y+3	; 0x03
 4c2:	93 83       	std	Z+3, r25	; 0x03
 4c4:	82 83       	std	Z+2, r24	; 0x02
 4c6:	45 2b       	or	r20, r21
 4c8:	29 f4       	brne	.+10     	; 0x4d4 <free+0xa2>
 4ca:	f0 93 23 01 	sts	0x0123, r31
 4ce:	e0 93 22 01 	sts	0x0122, r30
 4d2:	42 c0       	rjmp	.+132    	; 0x558 <free+0x126>
 4d4:	13 96       	adiw	r26, 0x03	; 3
 4d6:	fc 93       	st	X, r31
 4d8:	ee 93       	st	-X, r30
 4da:	12 97       	sbiw	r26, 0x02	; 2
 4dc:	ed 01       	movw	r28, r26
 4de:	49 91       	ld	r20, Y+
 4e0:	59 91       	ld	r21, Y+
 4e2:	9e 01       	movw	r18, r28
 4e4:	24 0f       	add	r18, r20
 4e6:	35 1f       	adc	r19, r21
 4e8:	e2 17       	cp	r30, r18
 4ea:	f3 07       	cpc	r31, r19
 4ec:	71 f4       	brne	.+28     	; 0x50a <free+0xd8>
 4ee:	80 81       	ld	r24, Z
 4f0:	91 81       	ldd	r25, Z+1	; 0x01
 4f2:	84 0f       	add	r24, r20
 4f4:	95 1f       	adc	r25, r21
 4f6:	02 96       	adiw	r24, 0x02	; 2
 4f8:	11 96       	adiw	r26, 0x01	; 1
 4fa:	9c 93       	st	X, r25
 4fc:	8e 93       	st	-X, r24
 4fe:	82 81       	ldd	r24, Z+2	; 0x02
 500:	93 81       	ldd	r25, Z+3	; 0x03
 502:	13 96       	adiw	r26, 0x03	; 3
 504:	9c 93       	st	X, r25
 506:	8e 93       	st	-X, r24
 508:	12 97       	sbiw	r26, 0x02	; 2
 50a:	e0 e0       	ldi	r30, 0x00	; 0
 50c:	f0 e0       	ldi	r31, 0x00	; 0
 50e:	d8 01       	movw	r26, r16
 510:	12 96       	adiw	r26, 0x02	; 2
 512:	8d 91       	ld	r24, X+
 514:	9c 91       	ld	r25, X
 516:	13 97       	sbiw	r26, 0x03	; 3
 518:	00 97       	sbiw	r24, 0x00	; 0
 51a:	19 f0       	breq	.+6      	; 0x522 <free+0xf0>
 51c:	f8 01       	movw	r30, r16
 51e:	8c 01       	movw	r16, r24
 520:	f6 cf       	rjmp	.-20     	; 0x50e <free+0xdc>
 522:	8d 91       	ld	r24, X+
 524:	9c 91       	ld	r25, X
 526:	98 01       	movw	r18, r16
 528:	2e 5f       	subi	r18, 0xFE	; 254
 52a:	3f 4f       	sbci	r19, 0xFF	; 255
 52c:	82 0f       	add	r24, r18
 52e:	93 1f       	adc	r25, r19
 530:	20 91 20 01 	lds	r18, 0x0120
 534:	30 91 21 01 	lds	r19, 0x0121
 538:	28 17       	cp	r18, r24
 53a:	39 07       	cpc	r19, r25
 53c:	69 f4       	brne	.+26     	; 0x558 <free+0x126>
 53e:	30 97       	sbiw	r30, 0x00	; 0
 540:	29 f4       	brne	.+10     	; 0x54c <free+0x11a>
 542:	10 92 23 01 	sts	0x0123, r1
 546:	10 92 22 01 	sts	0x0122, r1
 54a:	02 c0       	rjmp	.+4      	; 0x550 <free+0x11e>
 54c:	13 82       	std	Z+3, r1	; 0x03
 54e:	12 82       	std	Z+2, r1	; 0x02
 550:	10 93 21 01 	sts	0x0121, r17
 554:	00 93 20 01 	sts	0x0120, r16
 558:	df 91       	pop	r29
 55a:	cf 91       	pop	r28
 55c:	1f 91       	pop	r17
 55e:	0f 91       	pop	r16
 560:	08 95       	ret

00000562 <memcpy>:
 562:	fb 01       	movw	r30, r22
 564:	dc 01       	movw	r26, r24
 566:	02 c0       	rjmp	.+4      	; 0x56c <memcpy+0xa>
 568:	01 90       	ld	r0, Z+
 56a:	0d 92       	st	X+, r0
 56c:	41 50       	subi	r20, 0x01	; 1
 56e:	50 40       	sbci	r21, 0x00	; 0
 570:	d8 f7       	brcc	.-10     	; 0x568 <memcpy+0x6>
 572:	08 95       	ret

00000574 <_exit>:
 574:	f8 94       	cli

00000576 <__stop_program>:
 576:	ff cf       	rjmp	.-2      	; 0x576 <__stop_program>
