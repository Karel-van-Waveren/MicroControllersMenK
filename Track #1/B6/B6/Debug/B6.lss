
B6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000128  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000019c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001e0  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000143  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004b2  00000000  00000000  00000557  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00000a0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00010e71  00000000  00000000  00000a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000006a  00000000  00000000  000118b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0001191b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000002e4  00000000  00000000  00011933  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	13 d0       	rcall	.+38     	; 0xd0 <main>
  aa:	3c c0       	rjmp	.+120    	; 0x124 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <wait>:

enum states state = LED_SLOW;

void wait( int ms )
{
	for (int i=0; i<ms; i++)
  ae:	18 16       	cp	r1, r24
  b0:	19 06       	cpc	r1, r25
  b2:	6c f4       	brge	.+26     	; 0xce <wait+0x20>
  b4:	20 e0       	ldi	r18, 0x00	; 0
  b6:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	e9 ef       	ldi	r30, 0xF9	; 249
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <wait+0xe>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <wait+0x14>
  c2:	00 00       	nop
  c4:	2f 5f       	subi	r18, 0xFF	; 255
  c6:	3f 4f       	sbci	r19, 0xFF	; 255
  c8:	28 17       	cp	r18, r24
  ca:	39 07       	cpc	r19, r25
  cc:	a9 f7       	brne	.-22     	; 0xb8 <wait+0xa>
  ce:	08 95       	ret

000000d0 <main>:
		_delay_ms( 1 );
	}
}
int main (void)
{
	DDRD = 0b11111111;	
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	81 bb       	out	0x11, r24	; 17
	DDRC = 0b00000000;
  d4:	14 ba       	out	0x14, r1	; 20
		wait( 500 );
		PORTD = 0x00;
		wait( 500 );
		break;
		case LED_FAST:
		PORTD = 0x40;
  d6:	c0 e4       	ldi	r28, 0x40	; 64
	while (1)
	{
		if(PINC & 0x01)//Switch from slow to fast or fast to slow if pinc is pressed
		{
			if(state == LED_SLOW)
				state = LED_FAST;
  d8:	d1 e0       	ldi	r29, 0x01	; 1
			else
				state = LED_SLOW; 
		}
		switch(state){
  da:	80 91 00 01 	lds	r24, 0x0100
{
	DDRD = 0b11111111;	
	DDRC = 0b00000000;
	while (1)
	{
		if(PINC & 0x01)//Switch from slow to fast or fast to slow if pinc is pressed
  de:	98 9b       	sbis	0x13, 0	; 19
  e0:	0a c0       	rjmp	.+20     	; 0xf6 <main+0x26>
		{
			if(state == LED_SLOW)
  e2:	80 91 00 01 	lds	r24, 0x0100
  e6:	81 11       	cpse	r24, r1
  e8:	03 c0       	rjmp	.+6      	; 0xf0 <main+0x20>
				state = LED_FAST;
  ea:	d0 93 00 01 	sts	0x0100, r29
  ee:	11 c0       	rjmp	.+34     	; 0x112 <main+0x42>
			else
				state = LED_SLOW; 
  f0:	10 92 00 01 	sts	0x0100, r1
  f4:	05 c0       	rjmp	.+10     	; 0x100 <main+0x30>
		}
		switch(state){
  f6:	88 23       	and	r24, r24
  f8:	19 f0       	breq	.+6      	; 0x100 <main+0x30>
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	81 f7       	brne	.-32     	; 0xde <main+0xe>
  fe:	09 c0       	rjmp	.+18     	; 0x112 <main+0x42>
		case LED_SLOW:
		PORTD = 0x40;
 100:	c2 bb       	out	0x12, r28	; 18
		wait( 500 );
 102:	84 ef       	ldi	r24, 0xF4	; 244
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	d3 df       	rcall	.-90     	; 0xae <wait>
		PORTD = 0x00;
 108:	12 ba       	out	0x12, r1	; 18
		wait( 500 );
 10a:	84 ef       	ldi	r24, 0xF4	; 244
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	cf df       	rcall	.-98     	; 0xae <wait>
		break;
 110:	e4 cf       	rjmp	.-56     	; 0xda <main+0xa>
		case LED_FAST:
		PORTD = 0x40;
 112:	c2 bb       	out	0x12, r28	; 18
		wait( 125 );
 114:	8d e7       	ldi	r24, 0x7D	; 125
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	ca df       	rcall	.-108    	; 0xae <wait>
		PORTD = 0x00;
 11a:	12 ba       	out	0x12, r1	; 18
		wait( 125 );
 11c:	8d e7       	ldi	r24, 0x7D	; 125
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	c6 df       	rcall	.-116    	; 0xae <wait>
		break;	
 122:	db cf       	rjmp	.-74     	; 0xda <main+0xa>

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
