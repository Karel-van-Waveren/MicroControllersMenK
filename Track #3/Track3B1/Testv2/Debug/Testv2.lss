
Testv2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000164  000001d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000164  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003db  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000282  00000000  00000000  0000068f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000095c  00000000  00000000  00000911  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  00001270  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010f01  00000000  00000000  00001314  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000011d  00000000  00000000  00012215  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00012332  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003977  00000000  00000000  00012372  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e6       	ldi	r30, 0x64	; 100
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	45 d0       	rcall	.+138    	; 0x13e <main>
  b4:	55 c0       	rjmp	.+170    	; 0x160 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <lcd_strobe_lcd_e>:
  b8:	ab 9a       	sbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	89 ef       	ldi	r24, 0xF9	; 249
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <lcd_strobe_lcd_e+0x6>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <lcd_strobe_lcd_e+0xc>
  c4:	00 00       	nop
  c6:	ab 98       	cbi	0x15, 3	; 21
  c8:	89 ef       	ldi	r24, 0xF9	; 249
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <lcd_strobe_lcd_e+0x14>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <lcd_strobe_lcd_e+0x1a>
  d2:	00 00       	nop
  d4:	08 95       	ret

000000d6 <lcd_command>:
  d6:	cf 93       	push	r28
  d8:	c8 2f       	mov	r28, r24
  da:	85 bb       	out	0x15, r24	; 21
  dc:	aa 98       	cbi	0x15, 2	; 21
  de:	ec df       	rcall	.-40     	; 0xb8 <lcd_strobe_lcd_e>
  e0:	c2 95       	swap	r28
  e2:	c0 7f       	andi	r28, 0xF0	; 240
  e4:	c5 bb       	out	0x15, r28	; 21
  e6:	aa 98       	cbi	0x15, 2	; 21
  e8:	e7 df       	rcall	.-50     	; 0xb8 <lcd_strobe_lcd_e>
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <init>:
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	84 bb       	out	0x14, r24	; 20
  f2:	15 ba       	out	0x15, r1	; 21
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	ef df       	rcall	.-34     	; 0xd6 <lcd_command>
  f8:	88 e2       	ldi	r24, 0x28	; 40
  fa:	ed df       	rcall	.-38     	; 0xd6 <lcd_command>
  fc:	8c e0       	ldi	r24, 0x0C	; 12
  fe:	eb df       	rcall	.-42     	; 0xd6 <lcd_command>
 100:	86 e0       	ldi	r24, 0x06	; 6
 102:	e9 df       	rcall	.-46     	; 0xd6 <lcd_command>
 104:	80 e8       	ldi	r24, 0x80	; 128
 106:	e7 cf       	rjmp	.-50     	; 0xd6 <lcd_command>
 108:	08 95       	ret

0000010a <lcd_write_char>:
 10a:	cf 93       	push	r28
 10c:	c8 2f       	mov	r28, r24
 10e:	85 bb       	out	0x15, r24	; 21
 110:	aa 9a       	sbi	0x15, 2	; 21
 112:	d2 df       	rcall	.-92     	; 0xb8 <lcd_strobe_lcd_e>
 114:	c2 95       	swap	r28
 116:	c0 7f       	andi	r28, 0xF0	; 240
 118:	c5 bb       	out	0x15, r28	; 21
 11a:	aa 9a       	sbi	0x15, 2	; 21
 11c:	cd df       	rcall	.-102    	; 0xb8 <lcd_strobe_lcd_e>
 11e:	cf 91       	pop	r28
 120:	08 95       	ret

00000122 <lcd_writeLine1>:
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	ec 01       	movw	r28, r24
 128:	88 81       	ld	r24, Y
 12a:	88 23       	and	r24, r24
 12c:	29 f0       	breq	.+10     	; 0x138 <lcd_writeLine1+0x16>
 12e:	21 96       	adiw	r28, 0x01	; 1
 130:	ec df       	rcall	.-40     	; 0x10a <lcd_write_char>
 132:	89 91       	ld	r24, Y+
 134:	81 11       	cpse	r24, r1
 136:	fc cf       	rjmp	.-8      	; 0x130 <lcd_writeLine1+0xe>
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <main>:
#include <util/delay.h>
#include "lcd.h"

int main (void)
{
	DDRD = 0xFF;
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	81 bb       	out	0x11, r24	; 17
	init();
 142:	d5 df       	rcall	.-86     	; 0xee <init>
	lcd_writeLine1("Swag boy");
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	ec df       	rcall	.-40     	; 0x122 <lcd_writeLine1>
	while (1)
	{
		PORTC ^= (1<<6);
 14a:	90 e4       	ldi	r25, 0x40	; 64
 14c:	85 b3       	in	r24, 0x15	; 21
 14e:	89 27       	eor	r24, r25
 150:	85 bb       	out	0x15, r24	; 21
 152:	e3 e2       	ldi	r30, 0x23	; 35
 154:	f4 ef       	ldi	r31, 0xF4	; 244
 156:	31 97       	sbiw	r30, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <main+0x18>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <main+0x1e>
 15c:	00 00       	nop
 15e:	f6 cf       	rjmp	.-20     	; 0x14c <main+0xe>

00000160 <_exit>:
 160:	f8 94       	cli

00000162 <__stop_program>:
 162:	ff cf       	rjmp	.-2      	; 0x162 <__stop_program>
